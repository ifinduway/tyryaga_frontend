import User from '../models/User.js';
import Boss from '../models/Boss.js';
import Message from '../models/Message.js';
import Clan from '../models/Clan.js';
import UserInventory from '../models/UserInventory.js';

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
const initializeBosses = async () => {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Å—Å–æ–≤...');
    const deadBosses = await Boss.find({ state: 'dead' });

    if (deadBosses.length > 0) {
      console.log(
        `üíÄ –ù–∞–π–¥–µ–Ω–æ ${deadBosses.length} –º–µ—Ä—Ç–≤—ã—Ö –±–æ—Å—Å–æ–≤, –≤–æ–∑—Ä–æ–∂–¥–∞–µ–º...`
      );

      for (const boss of deadBosses) {
        await Boss.findByIdAndUpdate(boss._id, {
          state: 'available',
          currentHp: boss.maxHp,
          participants: [],
          defeatedAt: null
        });
        console.log(`‚úÖ –ë–æ—Å—Å ${boss.name} –≤–æ–∑—Ä–æ–∂–¥–µ–Ω!`);
      }
    } else {
      console.log('‚úÖ –í—Å–µ –±–æ—Å—Å—ã –∂–∏–≤—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Å—Å–æ–≤:', error);
  }
};

export const setupSocketHandlers = io => {
  // Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  io.use(async (socket, next) => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–Ω–ª–∞–π–Ω
      if (socket.userId) {
        await User.findByIdAndUpdate(socket.userId, {
          online: true,
          lastSeen: new Date()
        });
      }
      next();
    } catch (error) {
      console.error('Socket middleware error:', error);
      next(error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  io.on('connection', async socket => {
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (${socket.id})`
    );

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —á–∞—Ç—É
    socket.join('global');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
    try {
      const messages = await Message.getRoomMessages('global', null, 20);
      socket.emit('chatHistory', {
        room: 'global',
        messages: messages.reverse()
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    socket.on('chatMessage', async data => {
      try {
        const { room, roomId, text } = data;

        if (!text || text.trim().length === 0) {
          return socket.emit('error', {
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
          });
        }

        if (text.length > 500) {
          return socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' });
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = new Message({
          room,
          roomId,
          senderId: socket.userId,
          text: text.trim()
        });

        await message.save();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await message.populate('senderId', 'nickname');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        const fullRoomName = roomId ? `${room}_${roomId}` : room;
        io.to(fullRoomName).emit('newMessage', {
          id: message._id,
          room: message.room,
          roomId: message.roomId,
          senderId: message.senderId._id,
          senderName: message.senderId.nickname,
          text: message.text,
          createdAt: message.createdAt
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('joinRoom', async data => {
      try {
        const { room, roomId } = data;
        const fullRoomName = roomId ? `${room}_${roomId}` : room;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
        if (room === 'clan') {
          const user = await User.findById(socket.userId);
          if (!user.clanId || user.clanId.toString() !== roomId) {
            return socket.emit('error', {
              message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∫–ª–∞–Ω–∞'
            });
          }
        }

        socket.join(fullRoomName);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = await Message.getRoomMessages(room, roomId, 20);
        socket.emit('chatHistory', {
          room,
          roomId,
          messages: messages.reverse()
        });

        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${fullRoomName}`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
      }
    });

    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leaveRoom', data => {
      const { room, roomId } = data;
      const fullRoomName = roomId ? `${room}_${roomId}` : room;
      socket.leave(fullRoomName);
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${fullRoomName}`
      );
    });

    // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±–æ—Å—Å—É
    socket.on('dealDamage', async data => {
      console.log('üî• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ dealDamage:', data);
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', socket.user?.nickname, socket.userId);

      try {
        const { bossId, damage } = data;

        if (!damage || damage <= 0) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–Ω:', damage);
          return socket.emit('error', { message: '–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–Ω' });
        }

        const user = await User.findById(socket.userId);
        if (!user) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ç–∞–∫—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Å—Å–∞
        if (user.currentBossId && user.currentBossId.toString() !== bossId) {
          console.log(
            '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –¥—Ä—É–≥–æ–≥–æ –±–æ—Å—Å–∞:',
            user.currentBossId
          );
          return socket.emit('error', {
            message: '–í—ã —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Å—Å–∞'
          });
        }

        const boss = await Boss.findById(bossId);
        if (!boss || !boss.isAvailable()) {
          console.log('‚ùå –ë–æ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          return socket.emit('error', { message: '–ë–æ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!user.currentBossId) {
          await User.findByIdAndUpdate(socket.userId, {
            currentBossId: bossId
          });
        }

        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é
        const inventory = await UserInventory.findOne({
          userId: socket.userId
        }).populate('items.itemId');

        let weaponDamageBonus = 0;
        let critChanceBonus = 0;
        let critDamageMultiplier = user.critDamageMultiplier || 2;

        if (inventory) {
          const equippedWeapon = inventory.items.find(
            item => item.equipped && item.slot === 'weapon' && item.itemId
          );
          const equippedItems = inventory.items.filter(
            item =>
              item.equipped &&
              item.itemId &&
              ['helmet', 'boots', 'body', 'gloves', 'ring'].includes(item.slot)
          );

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä—É–∂–∏–µ
          if (equippedWeapon && equippedWeapon.itemId) {
            weaponDamageBonus = equippedWeapon.itemId.stats?.damage || 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ä—É–∂–∏—è
            if (equippedWeapon.itemId.effects) {
              for (const effect of equippedWeapon.itemId.effects) {
                if (effect.type === 'damage_boost' && effect.duration === 0) {
                  weaponDamageBonus = Math.max(weaponDamageBonus, effect.value);
                }
              }
            }
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
          for (const item of equippedItems) {
            if (item.itemId.stats?.damage) {
              weaponDamageBonus += item.itemId.stats.damage;
            }

            if (item.itemId.effects) {
              for (const effect of item.itemId.effects) {
                if (effect.type === 'luck_boost' && effect.duration === 0) {
                  critChanceBonus += effect.value;
                } else if (
                  effect.type === 'damage_boost' &&
                  effect.duration === 0
                ) {
                  critDamageMultiplier = Math.max(
                    critDamageMultiplier,
                    effect.value
                  );
                }
              }
            }
          }
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω
        const baseDamageWithWeapon = damage + weaponDamageBonus;
        const dmgMult = Math.max(0.1, user.damageMultiplier || 1);
        const critMult = Math.max(1, critDamageMultiplier);
        const critChance = Math.min(
          100,
          Math.max(0, (user.critChance || 0) + critChanceBonus)
        );

        const isCrit = Math.random() * 100 < critChance;
        const realDamage = Math.floor(
          baseDamageWithWeapon * dmgMult * (isCrit ? critMult : 1)
        );

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –±–æ—Å—Å—É
        const damageDealt = boss.takeDamage(realDamage, socket.userId);
        if (damageDealt) {
          await boss.save();

          const roomName = `boss_${bossId}`;

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ –±–æ—Å—Å–∞
          socket.join(roomName);

          // –ó–∞–ø–æ–ª–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∫–æ–º –∏ —É—Ä–æ–≤–Ω–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          let participantsPayload = [];
          try {
            await boss.populate('participants.userId', 'nickname level');
            participantsPayload = (boss.participants || []).map(p => ({
              userId:
                p.userId?._id?.toString?.() ||
                p.userId?.toString?.() ||
                p.userId,
              nickname: p.userId?.nickname || '–ò–≥—Ä–æ–∫',
              level: p.userId?.level || 1,
              damageDealt: p.damageDealt || 0,
              joinedAt: p.joinedAt || null
            }));
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ populate —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', e);
          }

          const updateData = {
            bossId: boss._id,
            currentHp: boss.currentHp,
            maxHp: boss.maxHp,
            state: boss.state,
            damageDealt: realDamage,
            realDamage: realDamage,
            damage: damage,
            weaponDamageBonus: weaponDamageBonus,
            baseDamageWithWeapon: baseDamageWithWeapon,
            dmgMult: dmgMult,
            critChance: critChance,
            critChanceBonus: critChanceBonus,
            critDamageMultiplier: critDamageMultiplier,
            dealtBy: {
              userId: socket.userId,
              nickname: socket.user.nickname
            },
            crit: isCrit,
            critEffectiveMult: isCrit ? critMult : 1,
            participants: participantsPayload
          };

          io.to(roomName).emit('bossUpdate', updateData);

          // –ï—Å–ª–∏ –±–æ—Å—Å —É–±–∏—Ç
          if (boss.currentHp === 0) {
            console.log('üíÄ –ë–æ—Å—Å —É–±–∏—Ç!');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–º–µ—Ä—Ç–≤"
            boss.state = 'dead';
            await boss.save();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–±–∏–π—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await User.findByIdAndUpdate(socket.userId, {
              $inc: { [`bossKills.${boss._id}`]: 1 },
              $unset: { currentBossId: 1 } // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Å—Å–∞
            });

            io.to(roomName).emit('bossDefeated', {
              bossId: boss._id,
              bossName: boss.name,
              dealtBy: {
                userId: socket.userId,
                nickname: socket.user.nickname
              },
              participants: participantsPayload
            });

            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await Message.createSystemMessage(
              'global',
              null,
              `–ë–æ—Å—Å ${boss.name} –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω –∏–≥—Ä–æ–∫–æ–º ${socket.user.nickname}!`
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
            io.to('global').emit('bossDefeatedGlobal', {
              bossName: boss.name,
              dealtBy: socket.user.nickname
            });

            // –°—Ä–∞–∑—É –≤–æ–∑—Ä–æ–∂–¥–∞–µ–º –±–æ—Å—Å–∞
            await Boss.findByIdAndUpdate(boss._id, {
              currentHp: boss.maxHp,
              participants: [],
              defeatedAt: null,
              state: 'available'
            });
            console.log(`üîÑ –ë–æ—Å—Å ${boss.name} –≤–æ–∑—Ä–æ–∂–¥–µ–Ω! HP: ${boss.maxHp}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–Ω–æ–º –±–æ—Å—Å–µ
            const respawnUpdate = {
              bossId: boss._id,
              currentHp: boss.maxHp,
              maxHp: boss.maxHp,
              participants: [],
              state: 'available'
            };
            console.log(
              'üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–∏:',
              respawnUpdate
            );
            io.to(roomName).emit('bossUpdate', respawnUpdate);
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞' });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', async () => {
      try {
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (${socket.id})`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω
        if (socket.userId) {
          await User.findByIdAndUpdate(socket.userId, {
            online: false,
            lastSeen: new Date(),
            $unset: { currentBossId: 1 } // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Å—Å–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    });
  });

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
  const distributeRewards = async boss => {
    try {
      const totalDamage = boss.participants.reduce(
        (sum, p) => sum + p.damageDealt,
        0
      );
      const rewards = [];

      for (const participant of boss.participants) {
        const damagePercentage = participant.damageDealt / totalDamage;
        const userRewards = boss.calculateRewards(participant.userId);

        if (userRewards) {
          const user = await User.findById(participant.userId);
          if (user) {
            user.money += userRewards.money;
            user.exp += userRewards.exp;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Å—Ä–∞–∑—É)
            while (user.exp >= user.level * 1000) {
              const expToNextLevel = user.level * 1000;
              user.level += 1;
              user.exp -= expToNextLevel;
            }

            await user.save();

            rewards.push({
              userId: participant.userId,
              nickname: user.nickname,
              money: userRewards.money,
              exp: userRewards.exp,
              items: userRewards.items,
              damagePercentage: (damagePercentage * 100).toFixed(2)
            });
          }
        }
      }

      return rewards;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
      return [];
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
  initializeBosses();
};
