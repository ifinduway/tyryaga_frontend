import User from '../models/User.js';
import BossInstance from '../models/BossInstance.js';
import BossTemplate from '../models/BossTemplate.js';
import Message from '../models/Message.js';
import Clan from '../models/Clan.js';
import UserInventory from '../models/UserInventory.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
const cleanupExpiredInstances = async () => {
  try {
    const expiredInstances = await BossInstance.find({
      isCompleted: false,
      expiresAt: { $lt: new Date() }
    });

    if (expiredInstances.length > 0) {
      console.log(`üßπ –ù–∞–π–¥–µ–Ω–æ ${expiredInstances.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤`);

      for (const instance of expiredInstances) {
        // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
        await User.findByIdAndUpdate(instance.ownerId, {
          $unset: { activeBossInstance: 1 }
        });

        // –£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
        await BossInstance.findByIdAndDelete(instance._id);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –∏–Ω—Å—Ç–∞–Ω—Å ${instance._id}`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤:', error);
  }
};

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
const distributeRewards = async (instance, template, io) => {
  try {
    if (instance.rewardsDistributed) {
      return;
    }

    const totalDamage = instance.participants.reduce(
      (sum, p) => sum + p.damageDealt,
      0
    );

    const rewards = [];

    // –ü–æ–ª–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–±–µ–∑ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π)
    const moneyReward = template.rewards.money || 0;
    const expReward = template.rewards.exp || 0;

    for (const participant of instance.participants) {
      const user = await User.findById(participant.userId);
      if (!user) continue;

      // –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      user.money += moneyReward;
      user.exp += expReward;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      const levelsGained = [];
      while (user.exp >= user.level * 1000) {
        const expToNextLevel = user.level * 1000;
        user.level += 1;
        user.exp -= expToNextLevel;
        levelsGained.push(user.level);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Å—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const bossStats = user.bossStats || new Map();
      const templateIdStr = template._id.toString();
      const currentStats = bossStats.get(templateIdStr) || {
        kills: 0,
        attempts: 0,
        bestTime: 0,
        lastKilledAt: null
      };

      currentStats.kills += 1;
      currentStats.lastKilledAt = new Date();

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
      if (
        currentStats.bestTime === 0 ||
        instance.battleDuration < currentStats.bestTime
      ) {
        currentStats.bestTime = instance.battleDuration;
      }

      bossStats.set(templateIdStr, currentStats);
      user.bossStats = bossStats;

      await user.save();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Ä–æ–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const damagePercentage =
        totalDamage > 0 ? (participant.damageDealt / totalDamage) * 100 : 0;

      rewards.push({
        userId: participant.userId,
        nickname: user.nickname,
        money: moneyReward,
        exp: expReward,
        levelsGained,
        damagePercentage: damagePercentage.toFixed(2)
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      io.to(`user_${participant.userId}`).emit('bossRewards', {
        money: moneyReward,
        exp: expReward,
        levelsGained,
        bossName: template.name
      });
    }

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    instance.rewardsDistributed = true;
    await instance.save();

    return rewards;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', error);
    return [];
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞
const updateTemplateStats = async (template, instance) => {
  try {
    const stats = template.stats || {
      totalKills: 0,
      totalAttempts: 0,
      averageKillTime: 0,
      fastestKillTime: 0,
      fastestKillBy: null
    };

    stats.totalKills += 1;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    if (stats.averageKillTime === 0) {
      stats.averageKillTime = instance.battleDuration;
    } else {
      stats.averageKillTime = Math.floor(
        (stats.averageKillTime * (stats.totalKills - 1) +
          instance.battleDuration) /
          stats.totalKills
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥
    if (
      stats.fastestKillTime === 0 ||
      instance.battleDuration < stats.fastestKillTime
    ) {
      stats.fastestKillTime = instance.battleDuration;
      stats.fastestKillBy = instance.ownerId;
    }

    template.stats = stats;
    await template.save();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–∞:', error);
  }
};

export const setupSocketHandlers = io => {
  // Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  io.use(async (socket, next) => {
    try {
      if (socket.userId) {
        await User.findByIdAndUpdate(socket.userId, {
          online: true,
          lastSeen: new Date()
        });
      }
      next();
    } catch (error) {
      console.error('Socket middleware error:', error);
      next(error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  io.on('connection', async socket => {
    console.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è (${socket.id})`
    );

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —á–∞—Ç—É
    socket.join('global');

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.join(`user_${socket.userId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
    try {
      const messages = await Message.getRoomMessages('global', null, 20);
      socket.emit('chatHistory', {
        room: 'global',
        messages: messages.reverse()
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    socket.on('chatMessage', async data => {
      try {
        const { room, roomId, text } = data;

        if (!text || text.trim().length === 0) {
          return socket.emit('error', {
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
          });
        }

        if (text.length > 500) {
          return socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' });
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = new Message({
          room,
          roomId,
          senderId: socket.userId,
          text: text.trim()
        });

        await message.save();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await message.populate('senderId', 'nickname');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        const fullRoomName = roomId ? `${room}_${roomId}` : room;
        io.to(fullRoomName).emit('newMessage', {
          id: message._id,
          room: message.room,
          roomId: message.roomId,
          senderId: message.senderId._id,
          senderName: message.senderId.nickname,
          text: message.text,
          createdAt: message.createdAt
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
      }
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('joinRoom', async data => {
      try {
        const { room, roomId } = data;
        const fullRoomName = roomId ? `${room}_${roomId}` : room;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ
        if (room === 'clan') {
          const user = await User.findById(socket.userId);
          if (!user.clanId || user.clanId.toString() !== roomId) {
            return socket.emit('error', {
              message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∫–ª–∞–Ω–∞'
            });
          }
        }

        socket.join(fullRoomName);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = await Message.getRoomMessages(room, roomId, 20);
        socket.emit('chatHistory', {
          room,
          roomId,
          messages: messages.reverse()
        });

        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${fullRoomName}`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
      }
    });

    // –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('leaveRoom', data => {
      const { room, roomId } = data;
      const fullRoomName = roomId ? `${room}_${roomId}` : room;
      socket.leave(fullRoomName);
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${fullRoomName}`
      );
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–Ω—Å—Ç–∞–Ω—Å—É –±–æ—Å—Å–∞
    socket.on('joinBossInstance', async data => {
      try {
        const { instanceId } = data;

        const instance = await BossInstance.findById(instanceId)
          .populate('templateId')
          .populate('participants.userId', 'nickname level')
          .populate('ownerId', 'nickname level');

        if (!instance) {
          return socket.emit('error', { message: '–ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        const isParticipant = instance.participants.some(
          p => p.userId._id.toString() === socket.userId.toString()
        );
        const isOwner =
          instance.ownerId._id.toString() === socket.userId.toString();

        if (!isParticipant && !isOwner) {
          return socket.emit('error', {
            message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∏–Ω—Å—Ç–∞–Ω—Å—É'
          });
        }

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞
        const roomName = `boss_instance_${instanceId}`;
        socket.join(roomName);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞
        socket.emit('bossInstanceState', {
          instanceId: instance._id,
          templateId: instance.templateId._id,
          templateName: instance.templateId.name,
          currentHp: instance.currentHp,
          maxHp: instance.maxHp,
          expiresAt: instance.expiresAt,
          isCompleted: instance.isCompleted,
          ownerId: instance.ownerId._id,
          ownerNickname: instance.ownerId.nickname,
          isOwner: isOwner,
          participants: instance.participants.map(p => ({
            userId: p.userId._id,
            nickname: p.userId.nickname,
            level: p.userId.level,
            damageDealt: p.damageDealt,
            joinedAt: p.joinedAt
          }))
        });

        // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü)
        if (!isOwner && isParticipant) {
          io.to(roomName).emit('playerJoined', {
            instanceId: instance._id,
            player: {
              userId: socket.userId,
              nickname: socket.user.nickname,
              level: socket.user.level
            }
          });
        }

        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–Ω—Å—Ç–∞–Ω—Å—É ${instanceId}`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–Ω—Å—Ç–∞–Ω—Å—É –±–æ—Å—Å–∞:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–Ω—Å—Ç–∞–Ω—Å—É' });
      }
    });

    // –ù–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –±–æ—Å—Å—É –≤ –∏–Ω—Å—Ç–∞–Ω—Å–µ
    socket.on('dealDamage', async data => {
      console.log('üî• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ dealDamage:', data);
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', socket.user?.nickname, socket.userId);

      try {
        const { instanceId, damage } = data;

        if (!damage || damage <= 0) {
          console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–Ω:', damage);
          return socket.emit('error', { message: '–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–Ω' });
        }

        const user = await User.findById(socket.userId);
        if (!user) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const instance =
          await BossInstance.findById(instanceId).populate('templateId');
        if (!instance) {
          console.log('‚ùå –ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return socket.emit('error', { message: '–ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (!instance.isAvailable()) {
          console.log('‚ùå –ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          return socket.emit('error', {
            message: '–ò–Ω—Å—Ç–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
          });
        }

        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é
        const inventory = await UserInventory.findOne({
          userId: socket.userId
        }).populate('items.itemId');

        let weaponDamageBonus = 0;
        let critChanceBonus = 0;
        let critDamageMultiplier = user.critDamageMultiplier || 2;

        if (inventory) {
          const equippedWeapon = inventory.items.find(
            item => item.equipped && item.slot === 'weapon' && item.itemId
          );
          const equippedItems = inventory.items.filter(
            item =>
              item.equipped &&
              item.itemId &&
              ['helmet', 'boots', 'body', 'gloves', 'ring'].includes(item.slot)
          );

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä—É–∂–∏–µ
          if (equippedWeapon && equippedWeapon.itemId) {
            weaponDamageBonus = equippedWeapon.itemId.stats?.damage || 0;

            if (equippedWeapon.itemId.effects) {
              for (const effect of equippedWeapon.itemId.effects) {
                if (effect.type === 'damage_boost' && effect.duration === 0) {
                  weaponDamageBonus = Math.max(weaponDamageBonus, effect.value);
                }
              }
            }
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
          for (const item of equippedItems) {
            if (item.itemId.stats?.damage) {
              weaponDamageBonus += item.itemId.stats.damage;
            }

            if (item.itemId.effects) {
              for (const effect of item.itemId.effects) {
                if (effect.type === 'luck_boost' && effect.duration === 0) {
                  critChanceBonus += effect.value;
                } else if (
                  effect.type === 'damage_boost' &&
                  effect.duration === 0
                ) {
                  critDamageMultiplier = Math.max(
                    critDamageMultiplier,
                    effect.value
                  );
                }
              }
            }
          }
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω
        const baseDamageWithWeapon = damage + weaponDamageBonus;
        const dmgMult = Math.max(0.1, user.damageMultiplier || 1);
        const critMult = Math.max(1, critDamageMultiplier);
        const critChance = Math.min(
          100,
          Math.max(0, (user.critChance || 0) + critChanceBonus)
        );

        const isCrit = Math.random() * 100 < critChance;
        const realDamage = Math.floor(
          baseDamageWithWeapon * dmgMult * (isCrit ? critMult : 1)
        );

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –±–æ—Å—Å—É
        const damageDealt = instance.takeDamage(realDamage, socket.userId);
        if (damageDealt) {
          await instance.save();

          const roomName = `boss_instance_${instanceId}`;

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–Ω–∞—Ç–µ –±–æ—Å—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≤ –Ω–µ–π
          if (!socket.rooms.has(roomName)) {
            socket.join(roomName);
            console.log(
              `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomName}`
            );
          }

          // –ó–∞–ø–æ–ª–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∏–∫–æ–º –∏ —É—Ä–æ–≤–Ω–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          let participantsPayload = [];
          try {
            await instance.populate('participants.userId', 'nickname level');
            participantsPayload = (instance.participants || []).map(p => ({
              userId:
                p.userId?._id?.toString?.() ||
                p.userId?.toString?.() ||
                p.userId,
              nickname: p.userId?.nickname || '–ò–≥—Ä–æ–∫',
              level: p.userId?.level || 1,
              damageDealt: p.damageDealt || 0,
              joinedAt: p.joinedAt || null
            }));
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ populate —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', e);
          }

          const updateData = {
            instanceId: instance._id,
            currentHp: instance.currentHp,
            maxHp: instance.maxHp,
            isCompleted: instance.isCompleted,
            damageDealt: realDamage,
            realDamage: realDamage,
            damage: damage,
            weaponDamageBonus: weaponDamageBonus,
            baseDamageWithWeapon: baseDamageWithWeapon,
            dmgMult: dmgMult,
            critChance: critChance,
            critChanceBonus: critChanceBonus,
            critDamageMultiplier: critDamageMultiplier,
            dealtBy: {
              userId: socket.userId,
              nickname: socket.user.nickname
            },
            crit: isCrit,
            critEffectiveMult: isCrit ? critMult : 1,
            participants: participantsPayload
          };

          io.to(roomName).emit('bossInstanceUpdate', updateData);

          // –ï—Å–ª–∏ –±–æ—Å—Å —É–±–∏—Ç
          if (instance.currentHp === 0 && instance.isCompleted) {
            console.log('üíÄ –ë–æ—Å—Å —É–±–∏—Ç!');

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            const rewards = await distributeRewards(
              instance,
              instance.templateId,
              io
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–∞
            await updateTemplateStats(instance.templateId, instance);

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for (const participant of instance.participants) {
              await User.findByIdAndUpdate(participant.userId, {
                $unset: { activeBossInstance: 1 }
              });
            }

            io.to(roomName).emit('bossInstanceDefeated', {
              instanceId: instance._id,
              bossName: instance.templateId.name,
              dealtBy: {
                userId: socket.userId,
                nickname: socket.user.nickname
              },
              participants: participantsPayload,
              rewards,
              battleDuration: instance.battleDuration
            });

            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç
            try {
              const systemMessage = await Message.createSystemMessage(
                'global',
                null,
                `–ë–æ—Å—Å ${instance.templateId.name} –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω –∏–≥—Ä–æ–∫–æ–º ${socket.user.nickname}!`
              );

              io.to('global').emit('newMessage', {
                id: systemMessage._id,
                room: systemMessage.room,
                roomId: systemMessage.roomId,
                senderId: null,
                senderName: '–°–∏—Å—Ç–µ–º–∞',
                text: systemMessage.text,
                createdAt: systemMessage.createdAt
              });
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
            io.to('global').emit('bossDefeatedGlobal', {
              bossName: instance.templateId.name,
              dealtBy: socket.user.nickname
            });
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞:', error);
        socket.emit('error', { message: '–û—à–∏–±–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞' });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', async () => {
      try {
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.user?.nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (${socket.id})`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω
        if (socket.userId) {
          await User.findByIdAndUpdate(socket.userId, {
            online: false,
            lastSeen: new Date()
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    });
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
  setInterval(cleanupExpiredInstances, 60 * 1000);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ä–∞–∑—É
  cleanupExpiredInstances();
};
