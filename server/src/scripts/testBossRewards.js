import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Boss from '../models/Boss.js';
import User from '../models/User.js';

dotenv.config({ path: '../../.env' });

const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://localhost:27017/tyuryaga';

const testBossRewards = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –±–æ—Å—Å–∞
    const boss = await Boss.findOne({ name: '–¢—é—Ä–µ–º–Ω—ã–π –ë–æ—Å—Å' });
    if (!boss) {
      console.log('‚ùå –ë–æ—Å—Å "–¢—é—Ä–µ–º–Ω—ã–π –ë–æ—Å—Å" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üëπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Å—Å–µ:');
    console.log(`   –ò–º—è: ${boss.name}`);
    console.log(`   HP: ${boss.currentHp}/${boss.maxHp}`);
    console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${boss.level}`);
    console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${boss.state}`);
    console.log(`\nüí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –±–æ—Å—Å–∞:`);
    console.log(`   –î–µ–Ω—å–≥–∏: ${boss.rewards.money.toLocaleString('ru-RU')}`);
    console.log(`   –û–ø—ã—Ç: ${boss.rewards.exp.toLocaleString('ru-RU')}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (boss.participants.length === 0) {
      console.log('\n‚ö†Ô∏è  –£ –±–æ—Å—Å–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      console.log('   –ê—Ç–∞–∫—É–π—Ç–µ –±–æ—Å—Å–∞ –≤ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥');
      return;
    }

    console.log(`\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (${boss.participants.length}):`);

    const totalDamage = boss.participants.reduce(
      (sum, p) => sum + p.damageDealt,
      0
    );

    for (const participant of boss.participants) {
      const user = await User.findById(participant.userId);
      const damagePercentage = (participant.damageDealt / totalDamage) * 100;

      console.log(`\n   üë§ ${user?.nickname || 'Unknown'}`);
      console.log(`      –£—Ä–æ–Ω: ${participant.damageDealt.toLocaleString('ru-RU')}`);
      console.log(`      –î–æ–ª—è —É—Ä–æ–Ω–∞: ${damagePercentage.toFixed(2)}%`);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      const rewards = boss.calculateRewards(participant.userId);
      if (rewards) {
        console.log(`      –ü–æ–ª—É—á–∏—Ç:`);
        console.log(
          `        üí∞ ${rewards.money.toLocaleString('ru-RU')} –¥–µ–Ω–µ–≥`
        );
        console.log(`        ‚ú® ${rewards.exp.toLocaleString('ru-RU')} –æ–ø—ã—Ç–∞`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–±–∏—Ç –ª–∏ –±–æ—Å—Å
    if (boss.state === 'dead') {
      console.log('\nüíÄ –ë–æ—Å—Å —É–±–∏—Ç!');
      console.log(`   –í—Ä–µ–º—è –ø–æ–±–µ–¥—ã: ${boss.defeatedAt}`);
      console.log('\n‚úÖ –ù–∞–≥—Ä–∞–¥—ã —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
    } else {
      console.log(`\n‚öîÔ∏è  –ë–æ—Å—Å –≤—Å–µ –µ—â–µ –∂–∏–≤ (${boss.currentHp} HP)`);
      console.log('   –ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('\nüíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:');
    for (const participant of boss.participants) {
      const user = await User.findById(participant.userId);
      if (user) {
        console.log(`   ${user.nickname}:`);
        console.log(`     üí∞ –î–µ–Ω—å–≥–∏: ${user.money.toLocaleString('ru-RU')}`);
        console.log(`     ‚ú® –û–ø—ã—Ç: ${user.exp.toLocaleString('ru-RU')}`);
        console.log(`     üéØ –£—Ä–æ–≤–µ–Ω—å: ${user.level}`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–≥—Ä–∞–¥:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
  }
};

testBossRewards();

