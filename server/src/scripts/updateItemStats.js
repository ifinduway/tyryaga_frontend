import mongoose from 'mongoose';
import Item from '../models/Item.js';

const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://localhost:27017/tyuryaga';

const updateItemStats = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const updates = [
      {
        name: '–ö–æ–∂–∞–Ω–∞—è –∫—É—Ä—Ç–∫–∞',
        stats: {
          damage: 0,
          defense: 0,
          energy: 0,
          health: 0,
          luck: 0
        }
      },
      {
        name: '–ë–æ–µ–≤—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏',
        stats: {
          damage: 5,
          defense: 0,
          energy: 0,
          health: 0,
          luck: 10
        }
      },
      {
        name: '–ö–æ–ª—å—Ü–æ —Å–∏–ª—ã',
        stats: {
          damage: 10,
          defense: 0,
          energy: 0,
          health: 0,
          luck: 0
        }
      }
    ];

    for (const update of updates) {
      const result = await Item.updateOne(
        { name: update.name },
        {
          $set: {
            stats: update.stats
          }
        }
      );

      if (result.modifiedCount > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${update.name}`);
        console.log(
          `   –°—Ç–∞—Ç—ã: —É—Ä–æ–Ω=${update.stats.damage}, —É–¥–∞—á–∞=${update.stats.luck}`
        );
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${update.name}`);
      }
    }

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
};

updateItemStats();
