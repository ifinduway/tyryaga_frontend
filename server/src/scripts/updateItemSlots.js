import mongoose from 'mongoose';
import Item from '../models/Item.js';

const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://localhost:27017/tyuryaga';

const updateExistingItems = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    const updates = [
      {
        name: '–ö—Ä–∏—Ç–®–ª–µ–º',
        type: 'helmet',
        stats: {
          damage: 0,
          defense: 10,
          energy: 0,
          health: 0,
          luck: 50
        }
      },
      {
        name: '–ö—Ä–∏—Ç–ë–æ—Ç—ã',
        type: 'boots',
        stats: {
          damage: 0,
          defense: 5,
          energy: 0,
          health: 0,
          luck: 0
        }
      }
    ];

    for (const update of updates) {
      const result = await Item.updateOne(
        { name: update.name },
        {
          $set: {
            type: update.type,
            stats: update.stats
          }
        }
      );

      if (result.modifiedCount > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${update.name} -> ${update.type}`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${update.name}`);
      }
    }

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
};

updateExistingItems();
