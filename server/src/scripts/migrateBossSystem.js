import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Boss from '../models/Boss.js';
import BossTemplate from '../models/BossTemplate.js';
import BossInstance from '../models/BossInstance.js';
import User from '../models/User.js';

dotenv.config();

const migrateBossSystem = async () => {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –±–æ—Å—Å–æ–≤...\n');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    const mongoURI =
      process.env.MONGODB_URI || 'mongodb://localhost:27017/tyuryaga';
    await mongoose.connect(mongoURI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –±–æ—Å—Å—ã
    console.log('üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Å—Å–æ–≤...');
    const existingBosses = await Boss.find();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –±–æ—Å—Å–æ–≤: ${existingBosses.length}\n`);

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–æ—Å—Å–æ–≤
    console.log('üìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –±–æ—Å—Å–æ–≤...');
    const templateMap = new Map(); // –ú–∞–ø–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö ID —Å –Ω–æ–≤—ã–º–∏

    for (const boss of existingBosses) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –±–æ—Å—Å–∞
      const requiredLevel = Math.max(1, Math.floor(boss.level * 0.8));

      const template = new BossTemplate({
        name: boss.name,
        description: `${boss.name} - –æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫`,
        maxHp: boss.maxHp,
        level: boss.level,
        requiredLevel: requiredLevel,
        rewards: boss.rewards,
        instanceDuration: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç
        isActive: true,
        stats: {
          totalKills: 0,
          totalAttempts: 0,
          averageKillTime: 0,
          fastestKillTime: 0,
          fastestKillBy: null
        }
      });

      await template.save();
      templateMap.set(boss._id.toString(), template._id);
      console.log(
        `   ‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${template.name} (—É—Ä–æ–≤–µ–Ω—å ${template.level}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${template.requiredLevel})`
      );
    }

    console.log(
      `\n   –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templateMap.size}/${existingBosses.length}\n`
    );

    // –®–∞–≥ 3: –û—á–∏—â–∞–µ–º –ø–æ–ª–µ currentBossId —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bossKills –≤ bossStats
    console.log('üìã –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const users = await User.find({
      $or: [{ currentBossId: { $exists: true } }, { bossKills: { $exists: true } }]
    });
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${users.length}`);

    let updatedUsers = 0;
    for (const user of users) {
      const updates = {};

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ currentBossId
      if (user.currentBossId) {
        updates.$unset = { currentBossId: 1 };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bossKills –≤ bossStats –µ—Å–ª–∏ –µ—Å—Ç—å
      if (user.bossKills && user.bossKills.size > 0) {
        const bossStats = new Map();
        
        for (const [oldBossId, kills] of user.bossKills) {
          const newTemplateId = templateMap.get(oldBossId);
          if (newTemplateId) {
            bossStats.set(newTemplateId.toString(), {
              kills: kills,
              attempts: kills, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ —Å—Ç–æ–ª—å–∫–æ –∂–µ
              bestTime: 0,
              lastKilledAt: null
            });
          }
        }

        if (bossStats.size > 0) {
          updates.bossStats = bossStats;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ
        if (!updates.$unset) {
          updates.$unset = {};
        }
        updates.$unset.bossKills = 1;
      }

      if (Object.keys(updates).length > 0) {
        await User.findByIdAndUpdate(user._id, updates);
        updatedUsers++;
      }
    }

    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${updatedUsers}\n`);

    // –®–∞–≥ 4: –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –±–æ—Å—Å–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    console.log('üìã –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤...');
    const deletedInstances = await BossInstance.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: ${deletedInstances.deletedCount}\n`);

    // –®–∞–≥ 5: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–æ—Å—Å—ã
    console.log('üìã –®–∞–≥ 5: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±–æ—Å—Å–æ–≤...');
    const deletedBosses = await Boss.deleteMany({});
    console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ –±–æ—Å—Å–æ–≤: ${deletedBosses.deletedCount}\n`);

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n');
    console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –±–æ—Å—Å–æ–≤: ${templateMap.size}`);
    console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${updatedUsers}`);
    console.log(`   - –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±–æ—Å—Å–æ–≤: ${deletedBosses.deletedCount}`);
    console.log(`   - –£–¥–∞–ª–µ–Ω–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: ${deletedInstances.deletedCount}\n`);

    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –±–æ—Å—Å–æ–≤:');
    const templates = await BossTemplate.find().sort({ requiredLevel: 1 });
    for (const template of templates) {
      console.log(
        `   - ${template.name}: —É—Ä–æ–≤–µ–Ω—å ${template.level}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${template.requiredLevel}, –Ω–∞–≥—Ä–∞–¥–∞ ${template.rewards.money}üí∞ ${template.rewards.exp}‚≠ê`
      );
    }

    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–æ—Å—Å–æ–≤.\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateBossSystem();

