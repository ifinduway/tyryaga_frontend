import mongoose from 'mongoose';
import UserInventory from '../models/UserInventory.js';

const MONGODB_URI =
  process.env.MONGODB_URI || 'mongodb://localhost:27017/tyuryaga';

const fixInventorySlots = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏
    const inventories = await UserInventory.find({
      'items.slot': { $in: ['armor'] }
    });

    console.log(
      `üîç –ù–∞–π–¥–µ–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏: ${inventories.length}`
    );

    for (const inventory of inventories) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã armor –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã
      for (const item of inventory.items) {
        if (item.slot === 'armor') {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
          if (item.itemId && item.itemId.type) {
            const slotMapping = {
              helmet: 'helmet',
              boots: 'boots',
              body: 'body',
              gloves: 'gloves',
              weapon: 'weapon',
              ring: 'ring'
            };

            const newSlot = slotMapping[item.itemId.type];
            if (newSlot) {
              item.slot = newSlot;
              console.log(
                `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ª–æ—Ç: ${item.itemId.name} (${item.itemId.type}) -> ${newSlot}`
              );
            } else {
              // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
              item.equipped = false;
              item.slot = null;
              console.log(
                `‚ùå –°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–æ–º: ${item.itemId?.name || 'Unknown'}`
              );
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
            item.equipped = false;
            item.slot = null;
            console.log(`‚ùå –°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö`);
          }
        }
      }

      await inventory.save();
    }

    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
};

fixInventorySlots();
